//
// @file ./hogwarts/school/concepts.gam
// @description This is the concepts.gam file for the school module.
//
// This module contains some course specific logic in order to be able to gain knowledge levels
// in a slightly different way.
//
// @author Stanley Clark <s.clark@student.tue.nl>
// @version 1.0.0
//

$options {
    default.order "auto"
}

// Extend from the main concept. Layout resources are the same for all courses

_concept {->(extends)../_concept
    ->(personal)../../_personal
    #layout-resources =`new String[]{"css/school.css", "css/root-concept.css"}`
    #unsuitable-resource =`"".equals(${_concept->(personal)#user-house}) ? "[[=../sorting-popup.xhtml]]" : "[[=../unsuitable.xhtml]]"`

    #[mark-courses-as-known]:Integer {
        event `
            ${#own-knowledge} = 0.5;
            if(${#is-course}){

                ${#course-knowledge} = 120;
                ${#completed} = true;
                ${#own-knowledge} = 1d;
            }

            Concept[] list = ${->(parent)<-(parent)};
            for (int i = 0; i < list.length; i++) {

                URI uri = session.resolve(list[i].getUri()+ "#mark-courses-as-known");
                EntityValue ev = (EntityValue)session.get(uri);
                session.put(uri, new EntityValue(uri, ((Integer)ev.getValue())+1));
            }
        `
    }

    event +
}

// Define the course concept where all our subjects will extend from.

_course {->(extends)_concept

    // The "later" screen is shown if the previously accessed concept is also the current concept
    // and only if you have not yet finished the course and only when the knowledge of the siblings is not complete

    #[course-knowledge]:Integer `0`
    #[course-duplicate-access]:Boolean `false`
    #[course-siblings-unknown]:Boolean `true`

    #course-unfinished =`${#course-knowledge} < 100`
    #course-blocked =`${#course-duplicate-access} && ${#course-unfinished} && ${#course-siblings-unknown}`
    #sub-resource =`${#course-blocked} ? "[[=later.xhtml]]" : "[[=layout.xhtml]]"`
    #is-course =`true`

    event +`

        Boolean duplicateAccess = ${.}.getUriString().equals(${_concept->(personal)#last-concept});
        ${#course-duplicate-access} = duplicateAccess;

        Boolean siblingsKnown = sum(${->(parent)<=(parent)#course-knowledge}) >= ((${->(parent)<-(parent)}.length - 2) * 100);
        ${#course-siblings-unknown} = !siblingsKnown;

        Boolean allowUpdate = (!duplicateAccess || siblingsKnown) && ${#suitability};

        if(allowUpdate){

            Integer courseKnowledge = ${#course-knowledge} < 120 ? ${#course-knowledge} + 20 : 120;
            ${#course-knowledge} = courseKnowledge;
            ${#own-knowledge} = Math.min((courseKnowledge / 100.0), 1.0);

            if (courseKnowledge >= 100) ${#completed} = true;

            // Whenever we access a course that is not blocked, the others should become unblocked

            Concept[] childrenList = ${->(parent)<-(parent)};
            for (int i = 0; i < childrenList.length; i++) {

                String siblingUriString = childrenList[i].getUriString();
                String lastConcept = ${_concept->(personal)#last-concept};

                if(!siblingUriString.equals(${.}.getUriString())){

                    URI uri = session.resolve(childrenList[i].getUri() + "#course-duplicate-access");
                    session.put(uri, new EntityValue(uri, false));
                }
            }
        }
        else{

            ${#own-knowledge} = Math.min((${#course-knowledge} / 100.0), 1.0);
            if (${#course-knowledge} >= 100) ${#completed} = true;
        }

        Concept[] courses = new Concept[]{${dada}, ${transfiguration}, ${herbology}, ${potions}};

        ArrayList nonAffiliatedCourses = new ArrayList();
        ArrayList affiliatedConcepts = new ArrayList();

        for (int i = 0; i < courses.length; i++){

            URI uri = session.resolve(courses[i].getUri() + "#affiliation");
            EntityValue ev = (EntityValue)session.get(uri);
            String affiliation = (String) ev.getValue();
            Boolean isAffiliated = affiliation.equals(${_concept->(personal)#user-house});

            uri = session.resolve(courses[i].getUri() + "#known");
            ev = (EntityValue)session.get(uri);
            Boolean isKnown = (Boolean)ev.getValue();

            Boolean isBlocked = (${.}.getUriString().equals(courses[i].getUriString()) && !siblingsKnown);

            if (isAffiliated && !isKnown && !isBlocked) {

                affiliatedConcepts.add(courses[i].getUriString());
            }
            else if(!isKnown && !isBlocked){

                nonAffiliatedCourses.add(courses[i].getUriString());
            }
        }

        if (affiliatedConcepts.size() > 0){

            ${_concept->(personal)#next-recommended} = Objects.toString(affiliatedConcepts.get(0), null);
        }
        else if (nonAffiliatedCourses.size() > 0) {

            int position = (int) Math.round(Math.random() * (nonAffiliatedCourses.size() - 1));
            ${_concept->(personal)#next-recommended} = Objects.toString(nonAffiliatedCourses.get(position), null);
        }
        else if (nonAffiliatedCourses.size() == 0) {
            ${_concept->(personal)#next-recommended} = ${../hall-of-fame}.getUriString();
        }
    `
}

completed {
     title ``
     #resource `[[=completed.xhtml]]`
}

// Each child concept needs a blank event otherwise changes won't be propagated

dada {->(extends)_course
    ->(parent)../school
    title `Defence Against the Dark Arts`

    #fragment-names =`new String[] {"dada/level1", "dada/level2", "dada/level3", "dada/level4", "dada/level5"}`
    event +
    #affiliation =`"gryffindor"`
}

dada/level1 {
    title `Level 1`
    #resource `[[=dada/level1.xhtml]]`
}

dada/level2 {
    title `Level 2`
    #resource `[[=dada/level2.xhtml]]`
}

dada/level3 {
    title `Level 3`
    #resource `[[=dada/level3.xhtml]]`
}

dada/level4 {
    title `Level 4`
    #resource `[[=dada/level4.xhtml]]`
}

dada/level5 {
    title `Level 5`
    #resource `[[=dada/level5.xhtml]]`
}

herbology {->(extends)_course
    ->(parent)../school
    title `Herbology`

    #fragment-names =`new String[] {"herbology/level1", "herbology/level2", "herbology/level3", "herbology/level4", "herbology/level5"}`
    event +
    #affiliation =`"hufflepuff"`
}

herbology/level1 {
    title `Level 1`
    #resource `[[=herbology/level1.xhtml]]`
}

herbology/level2 {
    title `Level 2`
    #resource `[[=herbology/level2.xhtml]]`
}

herbology/level3 {
    title `Level 3`
    #resource `[[=herbology/level3.xhtml]]`
}

herbology/level4 {
    title `Level 4`
    #resource `[[=herbology/level4.xhtml]]`
}

herbology/level5 {
    title `Level 5`
    #resource `[[=herbology/level5.xhtml]]`
}

potions {->(extends)_course
    ->(parent)../school
    title `Potions`

    #fragment-names =`new String[] {"potions/level1", "potions/level2", "potions/level3", "potions/level4", "potions/level5"}`
    event +
    #affiliation =`"slytherin"`
}

potions/level1 {
    title `Level 1`
    #resource `[[=potions/level1.xhtml]]`
}

potions/level2 {
    title `Level 2`
    #resource `[[=potions/level2.xhtml]]`
}

potions/level3 {
    title `Level 3`
    #resource `[[=potions/level3.xhtml]]`
}

potions/level4 {
    title `Level 4`
    #resource `[[=potions/level4.xhtml]]`
}

potions/level5 {
    title `Level 5`
    #resource `[[=potions/level5.xhtml]]`
}

transfiguration {->(extends)_course
    ->(parent)../school
    title `Transfiguration`

    #fragment-names =`new String[] {"transfiguration/level1", "transfiguration/level2", "transfiguration/level3", "transfiguration/level4", "transfiguration/level5"}`
    event +
    #affiliation =`"ravenclaw"`
}

transfiguration/level1 {
    title `Level 1`
    #resource `[[=transfiguration/level1.xhtml]]`
}

transfiguration/level2 {
    title `Level 2`
    #resource `[[=transfiguration/level2.xhtml]]`
}

transfiguration/level3 {
    title `Level 3`
    #resource `[[=transfiguration/level3.xhtml]]`
}

transfiguration/level4 {
    title `Level 4`
    #resource `[[=transfiguration/level4.xhtml]]`
}

transfiguration/level5 {
    title `Level 5`
    #resource `[[=transfiguration/level5.xhtml]]`
}


OWL {->(extends)_concept
    ->(parent)../school
    title `Owl Exam`

    #completed =`true`          // This is just a little hack to make sure this concept is not counted as a course

    // The following is a marker, which when the value is changed, will update the knowledge of particular courses

    #[reset-knowledge]:Double {
        event `
            if(${_concept->(personal)#knowledge1} == 0){
                ${transfiguration#course-knowledge} = 0;
                ${transfiguration#own-knowledge} = 0.0;
                ${_concept->(personal)#done1} = false;
            }
            if(${_concept->(personal)#knowledge1} == 50){
                ${transfiguration#course-knowledge} = 60;
                ${transfiguration#own-knowledge} = 0.6;
                ${_concept->(personal)#done1} = false;
            }
            if(${_concept->(personal)#knowledge1} == 100){
                ${transfiguration#course-knowledge} = 120;
                ${transfiguration#own-knowledge} = 1.0;
                ${_concept->(personal)#done1} = true;
            }
            if(${_concept->(personal)#knowledge2} == 0){
                ${herbology#course-knowledge} = 0;
                ${herbology#own-knowledge} = 0.0;
                ${_concept->(personal)#done2} = false;
            }
            if(${_concept->(personal)#knowledge2} == 50){
                ${herbology#course-knowledge} = 60;
                ${herbology#own-knowledge} = 0.6;
                ${_concept->(personal)#done2} = false;
            }
            if(${_concept->(personal)#knowledge2} == 100){
                ${herbology#course-knowledge} = 120;
                ${herbology#own-knowledge} = 1.0;
                ${_concept->(personal)#done2} = true;
            }
            if(${_concept->(personal)#knowledge3} == 0){
                ${potions#course-knowledge} = 0;
                ${potions#own-knowledge} = 0.0;
                ${_concept->(personal)#done3} = false;
            }
            if(${_concept->(personal)#knowledge3} == 50){
                ${potions#course-knowledge} = 60;
                ${potions#own-knowledge} = 0.6;
                ${_concept->(personal)#done3} = false;
            }
            if(${_concept->(personal)#knowledge3} == 100){
                ${potions#course-knowledge} = 120;
                ${potions#own-knowledge} = 1.0;
                ${_concept->(personal)#done3} = true;
            }
            if(${_concept->(personal)#knowledge4} == 0){
                ${dada#course-knowledge} = 0;
                ${dada#own-knowledge} = 0.0;
                ${_concept->(personal)#done4} = false;
            }
            if(${_concept->(personal)#knowledge4} == 50){
                ${dada#course-knowledge} = 60;
                ${dada#own-knowledge} = 0.6;
                ${_concept->(personal)#done4} = false;
            }
            if(${_concept->(personal)#knowledge4} == 100){
                ${dada#course-knowledge} = 120;
                ${dada#own-knowledge} = 1.0;
                ${_concept->(personal)#done4} = true;
            }
        `
    }

    event +`
        // The following will make sure that the own knowledge is between 0 to 1 based on tests passed

        ${#own-knowledge} = (
            ${_concept->(personal)#knowledge1} +
            ${_concept->(personal)#knowledge2} +
            ${_concept->(personal)#knowledge3} +
            ${_concept->(personal)#knowledge4}
        ) / 400.0;
    `
}
