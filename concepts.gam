$options {
    module "hogwarts"
}

// This is the root concept of the entire application

_concept {

    ->(personal)_personal

    #[visited]:Integer `0`              // Integer determining how many times a concept has been visited
    #[own-knowledge]:Double `0.0`       // Own knowledge by default will get set to 1 since you have now viewed the page
    #[course-knowledge]:Integer `-1`
    #[user-available]:Boolean `false`   // Override for when user marks a concept as suitable
    #base-url =`~
        return ${.}.getUriString().substring(0, ${.}.getUriString().indexOf("/", ${.}.getUriString().indexOf("/") + 2));
    `

    event +`
        ${#visited}++;

        if(${#suitability} || ${#user-available}){

            ${#own-knowledge} = 1.0;
        }

        if(!${.}.getUriString().equals(${_concept->(personal)#current-concept})){

            ${_concept->(personal)#last-unique-concept} = ${_concept->(personal)#current-concept};
        }

        ${_concept->(personal)#last-concept} = ${_concept->(personal)#current-concept};
        ${_concept->(personal)#current-concept} = ${.}.getUriString();
    `

    // If a role has not been determined yet, retrieve the letter screen.
    // Otherwise return the normal layout

    #resource =`"".equals(${_concept->(personal)#role}) ? "[[=welcome-screen.xhtml]]" : "[[=layout.xhtml]]"`

    // The knowledge value is the average of the parent knowledge and itself

    #knowledge:Double =`avg(new Object[] {${<=(parent)#knowledge}, ${#own-knowledge}})`
    #known-all:Boolean =`${#knowledge} > 0.8`
    #known:Boolean =`${#own-knowledge} == 1.0`
    #unknown:Boolean =`false`
    #suitability:Boolean =`~

        // If the user has an overview learning style
        // and this is a concept that has at least three parents,
        // then it will be unsuitable unless all siblings of the parent have been studied
        // or if it is a user available concept.

        if (${#user-available}) return true;

        if(!${_concept->(personal)#learning-style-deep}){
            if(${->(parent)}.length > 0){
                if(${->(parent)->(parent)}.length > 0 ){
                    if(${->(parent)->(parent)->(parent)}.length > 0){

                        return and(${->(parent)->(parent)<=(parent)#known}) ? true : false;
                    }
                }
            }
        }

        return and(new Object[] {${=>(prereq)#known-all}});
    `

    // A concept can be affiliated with a house, which will then become recommended

    #affiliation =`""`
    #course-blocked =`false`

    // Always start the title of the web page with "Hogwarts -"

    #layout.title `"Hogwarts - "+${.}.getTitle()`

    #layout-resources:String[] =`new String[0]`

    // Include all the needed css files in the head
    // The files that should be included last should go first here.

    #layout.css =`~
        StringBuilder sb = new StringBuilder("");

        sb.append("https://fonts.googleapis.com/css?family=Calligraffitti|Cormorant+SC|Quicksand");
        sb.append(";https://fonts.googleapis.com/icon?family=Material+Icons");

        if("slytherin".equals(${_concept->(personal)#user-house})){

            sb.append(";css/slytherin.css");
        } else if("gryffindor".equals(${_concept->(personal)#user-house})){

            sb.append(";css/gryffindor.css");
        } else if("hufflepuff".equals(${_concept->(personal)#user-house})){

            sb.append(";css/hufflepuff.css");
        } else if("ravenclaw".equals(${_concept->(personal)#user-house})){

            sb.append(";css/ravenclaw.css");
        } else{
            // Do nothing
        }

        for (int i = 0; i < ${#layout-resources}.length; i++) {

             sb.append(";" + ${#layout-resources}[i]);
        }

        sb.append(";css/main.css");
        sb.append(";vendor/foundation.min.css");

        return sb.toString();
    `

    // Classes to use when displaying adaptive links

    #link.classexpr `~

        StringBuilder sb = new StringBuilder("");
        sb.append("house-knowledge--" + ${#affiliation} + " ");

        if (${#course-knowledge} == 20) sb.append("knowledge--level1 ");
        if (${#course-knowledge} == 40) sb.append("knowledge--level2 ");
        if (${#course-knowledge} == 60) sb.append("knowledge--level3 ");
        if (${#course-knowledge} == 80) sb.append("knowledge--level4 ");
        if (${#course-knowledge} >= 100) sb.append("knowledge--level5 ");
        if (${#known}) sb.append("knowledge--known ");
        if (${#known-all}) sb.append("knowledge--known-all ");
        if (!${#suitability}) sb.append("knowledge--unsuitable ");
        if (${#suitability}) sb.append("knowledge--suitable ");
        if (${#suitability} && ${#visited} == 0) sb.append("knowledge--first-time ");
        if(!${#known} && ${#suitability} && ${#course-knowledge} == 0) sb.append("knowledge--unknown");
        return sb.toString();
    `
    #link.iconlist `null`

    // Tags are shown based on whether you view the concept for the first time or not
    #tags =`~
        if (${#visited} > 2) return "default;short";
        if (${#visited} > 1) return "default;long";
        return "intro;default;long";
    `
}

// User stored settings for the entire application

_personal {
    #[first-time]:Boolean `true`    // First time to visit the application
    #[last-concept]:String ``       // The last concept that was accessed by the user (especially useful for course learning)
    #[current-concept]:String ``    // The concept that is currently accessed
    #[last-unique-concept]:String ``    // The last accessed concept not the same as the current one

    #[user-name]:String ``          // Username of learner
    #[user-house]:String ``         // House of the learner

    // One of: beginner, intermediate or expert (default blank)
    #[role]:String ``

    #[cookies-accepted]:Boolean `false` // Changes when the user has accepted cookies

    #[learning-style-deep]:Boolean 'false' // Assume the user prefers a high level overview
}

hogwarts {->(extends)_concept
    title `Hogwarts`
    no-title `true`
}
