//
// @file ./concepts.gam
// @description This is the root concepts.gam file of the entire application
//
// @author Stanley Clark <s.clark@student.tue.nl>
// @version 1.0.0
//

// Define one module linked from this file with no other options

$options {
    module "hogwarts"
}

// Define the root concept of the entire application

_concept {

    ->(personal)_personal

    #[visited]:Integer `0`              // Integer determining how many times a concept has been visited
    #[own-knowledge]:Double `0.0`       // Own knowledge by default will get set to 1 since you have now viewed the page
    #[course-knowledge]:Integer `-1`    // The knowledge that you have if you are taking a particular course
    #[affiliation]:String `""`          // A concept can be affiliated to a particular house
    #[completed]:Boolean `false`        // Know whether a course was completed or not

    // Define a helper function for each concept, which allows the construction of the base URL of the server on
    // which the concepts are hosted

    #base-url =`~
        return ${.}.getUriString().substring(0, ${.}.getUriString().indexOf("/", ${.}.getUriString().indexOf("/") + 2));
    `
    #layout-resources:String[] =`new String[0]`

    // If a role has not been determined yet, retrieve the welcome letter screen, otherwise return the normal layout

    #resource =`~
        if("".equals(${_concept->(personal)#role})) return "[[=welcome-screen.xhtml]]";

        Double OwlKnowledge = (
            ${_concept->(personal)#knowledge1} +
            ${_concept->(personal)#knowledge2} +
            ${_concept->(personal)#knowledge3} +
            ${_concept->(personal)#knowledge4}
        ) / 400.0;

        if (OwlKnowledge == 1.0 && ${_concept->(personal)#show-end-screen}) return "[[=end-screen.xhtml]]";

        return "[[=layout.xhtml]]";
    `
    #unsuitable-resource =`"[[=hogwarts/unsuitable.xhtml]]"`

    // Define the variables that will be computed with every entry to the concept, based on other variables

    #knowledge:Double =`avg(new Object[] {${<=(parent)#knowledge}, ${#own-knowledge}})`
    #known-most:Boolean =`${#knowledge} > 0.8`
    #known-all:Boolean =`${#knowledge} == 1.0`
    #known:Boolean =`${#own-knowledge} == 1.0`
    #unknown:Boolean =`${#own-knowledge} == 0.0`
    #unvisited:Boolean =`${#visited} == 0`
    #top-level =`false`
    #is-course =`false`

    // Define suitability as:
    //      - Overview Learning Style:  If the user has an overview learning style and this is a concept
    //                                  that has at least three parents, then it will be unsuitable unless
    //                                  all siblings of the parent have been studied.
    //      - Normal case:              If all prerequisites are known-most, and if the parent is known

    #suitability:Boolean =`~

        if(!${_concept->(personal)#learning-style-deep}){
            if(${->(parent)}.length > 0){
                if(${->(parent)->(parent)}.length > 0 ){
                    if(${->(parent)->(parent)->(parent)}.length > 0){

                        return and(${->(parent)->(parent)<=(parent)#known}) ? true : false;
                    }
                }
            }
        }

        if("Owl Exam".equals(${?title})){

            return and(new Object[] {${->(parent)<=(parent)#completed}});
        }

        return and(new Object[] {${=>(prereq)#known-most}}) && ${->(parent)#known};
    `

    // Always start the title of the web page with "Hogwarts -"

    #layout.title `"Hogwarts - "+${.}.getTitle()`

    // Include all the needed css files in the head, in reverse order

    #layout.css =`~
        StringBuilder sb = new StringBuilder("");

        sb.append("https://fonts.googleapis.com/css?family=Calligraffitti|Cormorant+SC|Quicksand");
        sb.append(";https://fonts.googleapis.com/icon?family=Material+Icons");

        if("slytherin".equals(${_concept->(personal)#user-house})){

            sb.append(";css/slytherin.css");
        }
        else if("gryffindor".equals(${_concept->(personal)#user-house})){

            sb.append(";css/gryffindor.css");
        }
        else if("hufflepuff".equals(${_concept->(personal)#user-house})){

            sb.append(";css/hufflepuff.css");
        }
        else if("ravenclaw".equals(${_concept->(personal)#user-house})){

            sb.append(";css/ravenclaw.css");
        }
        else{

            // Do nothing
        }

        for (int i = 0; i < ${#layout-resources}.length; i++) {

             sb.append(";" + ${#layout-resources}[i]);
        }

        sb.append(";css/main.css");
        sb.append(";vendor/foundation.min.css");

        return sb.toString();
    `

    // Classes to use when displaying adaptive links

    #link.classexpr `~
        StringBuilder sb = new StringBuilder("");
        sb.append("house-knowledge--" + ${#affiliation} + " ");
        if (${#course-knowledge} >= 20) sb.append("knowledge--level" + Math.min((${#course-knowledge} / 20), 5) + " ");
        if (${#known}) sb.append("knowledge--known ");
        if (${#known-all}) sb.append("knowledge--known-all ");
        if (!${#suitability}) sb.append("knowledge--unsuitable ");
        if (${#suitability}) sb.append("knowledge--suitable ");
        if (${#suitability} && ${#unvisited} && !${#known}) sb.append("knowledge--first-time ");
        if (${#unknown}) sb.append("knowledge--unknown");
        return sb.toString();
    `

    // Do not display any icons by the links

    #link.iconlist `null`

    // Tags are shown based on whether you view the concept for the first time or not

    #tags =`~
        if (${#visited} > 2) return "default;short";
        if (${#visited} > 1) return "default;long";
        return "intro;default;long";
    `

    // Marks all chained prerequisites, as well as the children of each prerequisite

    #[mark-prereq-all]:Integer {
        event `
            ${#own-knowledge} = 1d;

            Concept[] list = ${->(prereq)};
            for (int i = 0; i < list.length; i++) {

                URI uri = session.resolve(list[i].getUri() + "#mark-prereq-all");
                EntityValue ev = (EntityValue)session.get(uri);
                session.put(uri, new EntityValue(uri, ((Integer)ev.getValue())+1));

                uri = session.resolve(list[i].getUri() + "#mark-all");
                ev = (EntityValue)session.get(uri);
                session.put(uri, new EntityValue(uri, ((Integer)ev.getValue())+1));
            }

            // We assume that we only have one parent for a child concept

            if(${->(parent)}.length > 0 && !"Hogwarts".equals(${->(parent)?title})){
                ${->(parent)#mark-prereq-all}++;
            }
        `
    }

    #[mark-prereq-all-visited]:Integer {
        event `
            ${#own-knowledge} = 1d;
            ${#visited}++;

            Concept[] list = ${->(prereq)};
            for (int i = 0; i < list.length; i++) {

                URI uri = session.resolve(list[i].getUri() + "#mark-prereq-all-visited");
                EntityValue ev = (EntityValue)session.get(uri);
                session.put(uri, new EntityValue(uri, ((Integer)ev.getValue())+1));

                uri = session.resolve(list[i].getUri() + "#mark-all-visited");
                ev = (EntityValue)session.get(uri);
                session.put(uri, new EntityValue(uri, ((Integer)ev.getValue())+1));
            }

            // We assume that we only have one parent for a child concept

            if(${->(parent)}.length > 0 && !"Hogwarts".equals(${->(parent)?title})){
                ${->(parent)#mark-prereq-all-visited}++;
            }
        `
    }

    // Marks all the children of a concept as known

    #[mark-all]:Integer {
        event `
            ${#own-knowledge} = 1d;
            Concept[] list = ${<-(parent)};
            for (int i = 0; i < list.length; i++) {

                URI uri = session.resolve(list[i].getUri()+ "#mark-all");
                EntityValue ev = (EntityValue)session.get(uri);
                session.put(uri, new EntityValue(uri, ((Integer)ev.getValue())+1));
            }
        `
    }

    #[mark-all-visited]:Integer {
        event `
            ${#own-knowledge} = 1d;
            ${#visited}++;
            Concept[] list = ${<-(parent)};
            for (int i = 0; i < list.length; i++) {

                URI uri = session.resolve(list[i].getUri()+ "#mark-all-visited");
                EntityValue ev = (EntityValue)session.get(uri);
                session.put(uri, new EntityValue(uri, ((Integer)ev.getValue())+1));
            }
        `
    }

    // Define the main event for all concepts that we have. Here we:
    //      - Define when to update the knowledge value and visited (if suitable and the user has been assigned a role)
    //      - Store the last accessed concept URIs, along with the last unique concept.
    //      - Look through the list of suitable concepts and select the one that is going to be recommended next

    event +`
        if(${#suitability} && !"".equals(${_concept->(personal)#role})){

            ${#own-knowledge} = 1.0;
            ${#visited}++;
        }

        if(!${.}.getUriString().equals(${_concept->(personal)#current-concept})){

            ${_concept->(personal)#last-unique-concept} = ${_concept->(personal)#current-concept};
        }

        ${_concept->(personal)#last-concept} = ${_concept->(personal)#current-concept};
        ${_concept->(personal)#current-concept} = ${.}.getUriString();

        // Look through children, siblings, parent, and siblings of the parent
        // to see which concept should be recommended next
        // We prefer concepts that take you further into the children of the current concept

        Boolean conceptFound = false;

        Concept[] children = ${<-(parent)};
        Concept[] siblings = ${->(parent)<-(parent)};
        Concept[] siblingsChildren = ${->(parent)<-(parent)<-(parent)};
        Concept[] parents = ${->(parent)};
        Concept[] parentParentSiblings = ${->(parent)->(parent)<-(parent)};
        Concept[] parentSiblings = ${->(parent)->(parent)->(parent)<-(parent)};

        Concept[][] lists = new Concept[][]{parents, children, siblings, siblingsChildren, parentSiblings, parentParentSiblings};

        for (int i = 0; i < lists.length; i++) {

            if (!conceptFound){

                for (int j = 0; j < lists[i].length; j++) {

                    Concept concept = lists[i][j];

                    URI uri = session.resolve(concept.getUri() + "#suitability");
                    EntityValue ev = (EntityValue)session.get(uri);
                    Boolean suitability = (Boolean)ev.getValue() == true;

                    uri = session.resolve(concept.getUri() + "#own-knowledge");
                    ev = (EntityValue)session.get(uri);
                    Boolean notKnown = (Double)ev.getValue() != 1.0;

                    uri = session.resolve(concept.getUri() + "#top-level");
                    ev = (EntityValue)session.get(uri);
                    Boolean isRoot = (Boolean)ev.getValue() == true;

                    if (suitability
                        && notKnown
                        && !concept.getUriString().equals(${_concept->(personal)#next-recommended})
                        && !isRoot
                    ){

                        ${_concept->(personal)#next-recommended} = concept.getUriString();
                        j = lists[i].length;
                        conceptFound = true;
                    }
                }
            }
            else{

                i = lists.length;
            }
        }

        if(CountModule.getVisitedUriCache(${#base-url} + "/hogwarts", gale).length >=28){

            ${_concept->(personal)#next-recommended} = ${#base-url} + "/hogwarts/school/OWL";
        }
    `
}

// User stored settings for the entire application

_personal {
    #[first-time]:Boolean `true`            // First time to visit the application
    #[last-concept]:String ``               // The last concept that was accessed by the user (especially useful for course learning)
    #[current-concept]:String ``            // The concept that is currently accessed
    #[last-unique-concept]:String ``        // The last accessed concept not the same as the current one
    #[user-name]:String ``                  // Username of learner
    #[user-house]:String ``                 // House of the learner
    #[role]:String ``                       // One of: beginner, intermediate or expert (default blank)
    #[cookies-accepted]:Boolean `false`     // Changes when the user has accepted cookies
    #[learning-style-deep]:Boolean `false`  // Assume the user prefers a high level overview
    #[next-recommended]:String `""`         // This stores the user's next recommended concept
    #[done1]:Boolean `false`
    #[done2]:Boolean `false`
    #[done3]:Boolean `false`
    #[done4]:Boolean `false`
    #[knowledge1]:Double ``
    #[knowledge2]:Double ``
    #[knowledge3]:Double ``
    #[knowledge4]:Double ``
    #[show-end-screen]:Boolean `true`
}

hogwarts {->(extends)_concept
    title `Hogwarts`
    no-title `true`

    // Because this concept is not available for visitation, but a tree hierarchy should be made,
    // we mark the root hogwarts concept as known so that sub concepts become suitable

    #own-knowledge =`1.0`
    #top-level =`true`;
}
